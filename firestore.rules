rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	match /users/{user} {
    	allow read: if request.auth != null
      allow write: if request.auth.uid == user
    }
    
    match /appointments/{appointment} {
      allow read: if request.auth != null && resource.data.forUser is string && request.auth.uid == resource.data.forUser  
      allow create: if request.auth != null && request.resource.data.forUser == request.auth.uid || request.resource.data.forUser == 'all'
    }

    match /groupSessions/{groupSession} {
      allow read: if request.auth != null && resource.data.display is string && resource.data.display == 'public'
      allow write: if false
    } 
    
    match /resources/{resourceDoc} {
      allow read: if request.auth != null && resource.data.display is string && resource.data.display == 'public'
      allow write: if false
    }

    match /counsellors/{counsellor} {
      allow read: if request.auth != null && resource.data.display == 'public'
      allow write: if false
    }
    
    match /timeSlots/{timeSlot} {
      allow read: if request.auth != null
    }

    match /chatRooms/{room} {
      allow read: if request.auth != null && resource.data.display == 'public' && request.auth.uid in resource.data.users
      allow create: if request.auth != null && resource.data.display is string && request.auth.uid in resource.data.users
      match /messages/{msg} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(room)).data.users
        allow create: if request.auth != null && request.resource.data.fromUser == request.auth.uid && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(room)).data.users
      }
    }    
  }
}